{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"System",
				"SystemTimerCallBack"
			],
			[
				"print",
				"println"
			],
			[
				"eGFX_",
				"eGFX_Point"
			]
		]
	},
	"buffers":
	[
		{
			"file": "System.h",
			"settings":
			{
				"buffer_size": 1041,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"System.h\"\n\n\nvoid ChangeGameState(uint8_t NewState);\nvoid adc0_timer_callback(void) ;\nvoid playFile(const char *filename);\n\n\n\n\nuint8_t GameState = GAME_STATE_INIT;\nint8_t GameVictor= - 1;\n\n\nchar StringBuf[256];\n\n\n\n// hold elapsed time for a single sample to be converted and buffered\n// Define the array of leds\n\n\nuint8_t GlowIdx = 0;\nuint8_t GlowTable[256] = {127, 130,  133,  136,  139,  143,  146,  149,  152,  155,  158,  161,  164,  167,  170,  173,\n                          176,  179,  181,  184,  187,  190,  193,  195,  198,  200,  203,  205,  208,  210,  213,  215,\n                          217,  219,  221,  223,  225,  227,  229,  231,  233,  235,  236,  238,  239,  241,  242,  243,\n                          245,  246,  247,  248,  249,  250,  250,  251,  252,  252,  253,  253,  253,  254,  254,  254,\n                          254,  254,  254,  254,  253,  253,  252,  252,  251,  251,  250,  249,  248,  247,  246,  245,\n                          244,  243,  241,  240,  239,  237,  235,  234,  232,  230,  228,  226,  224,  222,  220,  218,\n                          216,  214,  211,  209,  207,  204,  202,  199,  196,  194,  191,  188,  186,  183,  180,  177,\n                          174,  171,  168,  166,  163,  159,  156,  153,  150,  147,  144,  141,  138,  135,  132,  129,\n                          125,  122,  119,  116,  113,  110,  107,  104,  101,  98, 95, 91, 88, 86, 83, 80,\n                          77, 74, 71, 68, 66, 63, 60, 58, 55, 52, 50, 47, 45, 43, 40, 38,\n                          36, 34, 32, 30, 28, 26, 24, 22, 20, 19, 17, 15, 14, 13, 11, 10,\n                          9,  8,  7,  6,  5,  4,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0,\n                          0,  0,  0,  1,  1,  1,  2,  2,  3,  4,  4,  5,  6,  7,  8,  9,\n                          11, 12, 13, 15, 16, 18, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37,\n                          39, 41, 44, 46, 49, 51, 54, 56, 59, 61, 64, 67, 70, 73, 75, 78,\n                          81, 84, 87, 90, 93, 96, 99, 102,  105,  108,  111,  115,  118,  121,  124,  127};\n\nint l;\n\n//\n// AUDIO STUFF\n//\n#ifdef ENABLE_AUDIO\n// audio stuff\n// GUItool: begin automatically generated code\nAudioPlaySdWav           playWav1;       //xy=154,78\nAudioOutputI2S           i2s1;           //xy=334,89\nAudioConnection          patchCord1(playWav1, 0, i2s1, 0);\nAudioConnection          patchCord2(playWav1, 1, i2s1, 1);\nAudioControlSGTL5000     sgtl5000_1;     //xy=240,153\n// GUItool: end automatically generated code\n#endif\n\n\n//\n// WIFI STUFF\n//\n#define WIFI_SERIAL Serial1\nNeosCommMgr *ncm;\nNeosCommMgr::GameDataCommon gdStatus;\n\nuint32_t LastSwitch = 0;\nuint32_t CurrentSwitch = 0;\n\nvoid CheckSwitch()\n{\n  LastSwitch = CurrentSwitch;\n  CurrentSwitch = digitalRead(SWITCH_PIN);\n\n  if(LastSwitch == LOW && CurrentSwitch == HIGH)\n  {\n     ChangeGameState(GAME_RESET);\n  }\n \n}\n\nelapsedMillis sinceGameStatus;\n#define HH_MAX_NUM_PLAYERS 1\n\nvoid setup() \n{\n\n  eGFX_InitDriver();\n\n  Serial.begin(9600);\n  Serial.println(\"tipsy\");\n\n  eGFX_ImagePlane_Clear(&eGFX_BackBuffer);\n  eGFX_Blit(&eGFX_BackBuffer,\n            0,\n            0,\n            &Sprite_32BPP_PW_Logo);\n    \n   eGFX_Dump(&eGFX_BackBuffer);\n\n  // Audio connections require memory to work.  For more\n  // detailed information, see the MemoryAndCpuUsage example\n  #ifdef ENABLE_AUDIO\n // AudioMemory(8);\n\n  //sgtl5000_1.enable();\n  //sgtl5000_1.volume(0.75);\n\n//  SPI.setMOSI(7);\n // SPI.setSCK(14);\n  //if (!(SD.begin(10))) {\n   //  Serial.println(\"Unable to access the SD card\");\n // }\n  #endif\n  \n  InitUserInput();\n\n  ChangeGameState(GAME_RESET);\n\n\n  ncm = new NeosCommMgr(&WIFI_SERIAL);\n  ncm->onConfigureGame\n  (\n    [] (NeosCommMgr::GameDataCommon *gameData)\n    {\n      \n      Serial.println(\"onConfigureGame lambda\");\n      \n    \n      Serial.println(\"Setting Colors\");\n     // Player1Color = gameData->players[0].color;\n      //Player2Color = gameData->players[1].color;\n      \n      ChangeGameState(GAME_RESET);\n      \n      Serial.print(\"New Game Started\");\n      \n    }\n  );\n \n\n \n}\n\n\nvoid loop()\n{\n  uint32_t i,j,k;\n  float X,Y;\n       \n  GlowIdx+=4;\n\n  ncm->process();\n  \n  if (sinceGameStatus > 250)\n  {\n    memset(&gdStatus, 0, sizeof(NeosCommMgr::GameDataCommon));\n    \n    gdStatus.players_len = MAX_NUM_PLAYERS;\n    \n    gdStatus.players[0].score  = 0;\n\n    gdStatus.players[1].score  =  0;\n    \n    gdStatus.winner = GameVictor;\n    \n    ncm->sendGameStatus(&gdStatus);\n    \n    sinceGameStatus = 0;\n  }\n   \n  switch(GameState)\n  {\n    default:\n\n    case GAME_RESET:\n\n    CheckSwitch();\n \n    gameTimer = 0;\n\n    ChangeGameState(GAME_INIT_ACCEL);\n \n    break;\n\n\n    case GAME_INIT_ACCEL:\n\n  \n        ChangeGameState(GAME_STATE_INIT);\n\n    break;\n\n    \n    case GAME_STATE_INIT:\n\n           ChangeGameState(GAME_STATE_PLAY);\n\n           Init__Game__SensorTest();\n\n    break;\n\n       \n    case GAME_STATE_PLAY:\n     \n        Process__Game__SensorTest();\n  \n    break;\n  \n  \n    case GAME_STATE_VICTORY:\n    break;\n\n\n    case GAME_STATE_DISPLAY_FLAG:\n        break;\n        \n    \n      if(l>0)\n      {\n        l= 0;\n        digitalWrite(LED_FRAME_RATE,1);\n      }\n      else\n      {\n        l = 1;\n        digitalWrite(LED_FRAME_RATE,0);\n      }\n     \n\n   }\n   \n}\n\n\n#ifdef ENABLE_AUDIO\nvoid playFile(const char *filename)\n{\n    // Start playing the file.  This sketch continues to\n  // run while the file plays.\n  playWav1.play(filename);\n\n \n}\n#endif\n\n\n\n\nvoid ChangeGameState(uint8_t NewState)\n{\n\n  switch(NewState)\n  {\n      case GAME_RESET:\n\n      GameState = NewState;\n      \n      break;\n\n      case GAME_INIT_ACCEL:\n        GameState = NewState;\n      break;\n     \n      default:\n      case GAME_STATE_INIT:\n          GameState = NewState;\n          GameVictor = -1;\n      break;\n\n      case GAME_STATE_PLAY:\n        GameState = NewState;\n        gameTimer = 0;\n        GameVictor = -1;\n      break;\n\n      case GAME_STATE_VICTORY:\n      \n      gameTimer = 0;\n      GameState = NewState;\n   \n//      playFile(VICTORY);\n\n      break;\n\n\n      case GAME_STATE_DISPLAY_FLAG:\n      gameTimer = 0;\n        GameState = NewState;\n      break;\n  }\n  \n}\n\n",
			"file": "tipsy.ino",
			"file_size": 6164,
			"file_write_time": 130974412735168088,
			"settings":
			{
				"buffer_size": 6109,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"System.h\"\n\n\n\nvoid Init__Game__SensorTest()\n{\n	\n\n}\n\nvoid Process__Game__SensorTest()\n{\n\n\n UpdateUserInput();\n\n     eGFX_ImagePlane_Clear(&eGFX_BackBuffer);\n \n      eGFX_PutPixel(&eGFX_BackBuffer,14 + GameBoard_X,\n                      14 -  GameBoard_Y, 0xFFFF00FF);\n \n\n\n	eGFX_DrawHline(&eGFX_BackBuffer,\n	                   0,\n	                   eGFX_PHYSICAL_SCREEN_SIZE_X-1,\n	                   0,\n	                   0xFF00FF00);\n\n\n	eGFX_DrawHline(&eGFX_BackBuffer,\n	                   0,\n	                   eGFX_PHYSICAL_SCREEN_SIZE_X-1,\n	                   eGFX_PHYSICAL_SCREEN_SIZE_Y-1,\n	                   0xFF00FF00);\n\n	eGFX_DrawVline(&eGFX_BackBuffer,\n	                   0,\n	                   eGFX_PHYSICAL_SCREEN_SIZE_Y-1,\n	                   eGFX_PHYSICAL_SCREEN_SIZE_X-1,\n	                   0xFF00FF00);\n\n\n	eGFX_DrawVline(&eGFX_BackBuffer,\n	                   0,\n	                   eGFX_PHYSICAL_SCREEN_SIZE_Y-1,\n	                   0,\n	                   0xFF00FF00);\n\n/*\n\n  	eGFX_printf(&eGFX_BackBuffer,\n                      10,\n                      1,\n                     &FONT_3_5_1BPP,\n                     \"%i,%i\",GameBoard_X,GameBoard_Y);\n*/\n     eGFX_Dump(&eGFX_BackBuffer);\n	\n\n}\n",
			"file": "Game_SensorTest.ino",
			"file_size": 1297,
			"file_write_time": 130974439504490840,
			"settings":
			{
				"buffer_size": 1220,
				"line_ending": "Windows"
			}
		},
		{
			"file": "UserInput.h",
			"settings":
			{
				"buffer_size": 177,
				"line_ending": "Windows"
			}
		},
		{
			"file": "tipsy_32BPP.c",
			"settings":
			{
				"buffer_size": 32651,
				"line_ending": "Windows"
			}
		},
		{
			"file": "tipsy_32BPP.h",
			"settings":
			{
				"buffer_size": 622,
				"line_ending": "Windows"
			}
		},
		{
			"file": "TipsyConfig.h",
			"settings":
			{
				"buffer_size": 53,
				"line_ending": "Windows"
			}
		},
		{
			"file": "UserInput.ino",
			"settings":
			{
				"buffer_size": 4182,
				"line_ending": "Windows"
			}
		},
		{
			"file": "System.ino",
			"settings":
			{
				"buffer_size": 297,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Game_SensorTest.h",
			"settings":
			{
				"buffer_size": 128,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/C++/C++.sublime-build",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/ehughes/Documents/GitHub/neos/tipsy/tipsy/System.ino",
		"/C/Users/ehughes/Documents/GitHub/neos/tipsy/tipsy/eGFX_Driver_APA102_28_28.h",
		"/C/Users/ehughes/Documents/GitHub/neos/tipsy/tipsy/eGFX_Driver_APA102_28_28.cpp",
		"/C/Users/ehughes/Documents/GitHub/neos/tipsy/tipsy/eGFX_DataTypes.h",
		"/C/Users/ehughes/Documents/GitHub/neos/tipsy/tipsy/eGFX.h",
		"/C/Users/ehughes/Documents/GitHub/neos/tipsy/tipsy/eGFX.c",
		"/Z/TM/Firmware/DEVELOPMENT/SRC/TM4/src/main.c"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ACCEL_BUF_SIZE",
			"Game",
			"GameBoard"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "System.h",
					"settings":
					{
						"buffer_size": 1041,
						"regions":
						{
						},
						"selection":
						[
							[
								1041,
								1041
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "tipsy.ino",
					"settings":
					{
						"buffer_size": 6109,
						"regions":
						{
						},
						"selection":
						[
							[
								198,
								198
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Game_SensorTest.ino",
					"settings":
					{
						"buffer_size": 1220,
						"regions":
						{
						},
						"selection":
						[
							[
								1180,
								1180
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "UserInput.h",
					"settings":
					{
						"buffer_size": 177,
						"regions":
						{
						},
						"selection":
						[
							[
								168,
								150
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "tipsy_32BPP.c",
					"settings":
					{
						"buffer_size": 32651,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 3690.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "tipsy_32BPP.h",
					"settings":
					{
						"buffer_size": 622,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "TipsyConfig.h",
					"settings":
					{
						"buffer_size": 53,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "UserInput.ino",
					"settings":
					{
						"buffer_size": 4182,
						"regions":
						{
						},
						"selection":
						[
							[
								763,
								739
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "System.ino",
					"settings":
					{
						"buffer_size": 297,
						"regions":
						{
						},
						"selection":
						[
							[
								20,
								101
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Game_SensorTest.h",
					"settings":
					{
						"buffer_size": 128,
						"regions":
						{
						},
						"selection":
						[
							[
								128,
								128
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
